// <auto-generated />
using System;
using System.Net;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using meal_assistant_dotnet_mvc.Models.Entities;

namespace mealassistantdotnetmvc.Migrations
{
    [DbContext(typeof(meal_assistant_developmentContext))]
    partial class meal_assistant_developmentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("meal_assistant_dotnet_mvc.Models.Entities.ComponentTags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("ComponentId")
                        .HasColumnName("component_id");

                    b.Property<int?>("TagId")
                        .HasColumnName("tag_id");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId")
                        .HasName("index_component_tags_on_component_id");

                    b.HasIndex("TagId")
                        .HasName("index_component_tags_on_tag_id");

                    b.ToTable("component_tags");
                });

            modelBuilder.Entity("meal_assistant_dotnet_mvc.Models.Entities.Components", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .HasColumnName("comments");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<int?>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rating")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("character varying");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("character varying");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("index_components_on_user_id");

                    b.ToTable("components");
                });

            modelBuilder.Entity("meal_assistant_dotnet_mvc.Models.Entities.Feedbacks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<string>("Message")
                        .HasColumnName("message")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("index_feedbacks_on_user_id");

                    b.ToTable("feedbacks");
                });

            modelBuilder.Entity("meal_assistant_dotnet_mvc.Models.Entities.MainDishes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .HasColumnName("comments");

                    b.Property<int?>("MealId")
                        .HasColumnName("meal_id");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("MealId")
                        .HasName("index_main_dishes_on_meal_id");

                    b.ToTable("main_dishes");
                });

            modelBuilder.Entity("meal_assistant_dotnet_mvc.Models.Entities.MealTimes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("meal_times");
                });

            modelBuilder.Entity("meal_assistant_dotnet_mvc.Models.Entities.Meals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnName("end_time");

                    b.Property<int?>("MealTimeId")
                        .HasColumnName("meal_time_id");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<double?>("Rating")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnName("start_time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("MealTimeId")
                        .HasName("index_meals_on_meal_time_id");

                    b.ToTable("meals");
                });

            modelBuilder.Entity("meal_assistant_dotnet_mvc.Models.Entities.MealsComponents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("ComponentId")
                        .HasColumnName("component_id");

                    b.Property<int?>("MealId")
                        .HasColumnName("meal_id");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId")
                        .HasName("index_meals_components_on_component_id");

                    b.HasIndex("MealId")
                        .HasName("index_meals_components_on_meal_id");

                    b.ToTable("meals_components");
                });

            modelBuilder.Entity("meal_assistant_dotnet_mvc.Models.Entities.Tags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("index_tags_on_user_id");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("meal_assistant_dotnet_mvc.Models.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("CurrentSignInAt")
                        .HasColumnName("current_sign_in_at");

                    b.Property<IPAddress>("CurrentSignInIp")
                        .HasColumnName("current_sign_in_ip");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying");

                    b.Property<string>("EncryptedPassword")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("encrypted_password")
                        .HasColumnType("character varying")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime?>("LastSignInAt")
                        .HasColumnName("last_sign_in_at");

                    b.Property<IPAddress>("LastSignInIp")
                        .HasColumnName("last_sign_in_ip");

                    b.Property<string>("Provider")
                        .HasColumnName("provider")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("RememberCreatedAt")
                        .HasColumnName("remember_created_at");

                    b.Property<DateTime?>("ResetPasswordSentAt")
                        .HasColumnName("reset_password_sent_at");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnName("reset_password_token")
                        .HasColumnType("character varying");

                    b.Property<int>("SignInCount")
                        .HasColumnName("sign_in_count");

                    b.Property<string>("Token")
                        .HasColumnName("token")
                        .HasColumnType("character varying");

                    b.Property<string>("Uid")
                        .HasColumnName("uid")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("index_users_on_email");

                    b.HasIndex("ResetPasswordToken")
                        .IsUnique()
                        .HasName("index_users_on_reset_password_token");

                    b.ToTable("users");
                });

            modelBuilder.Entity("meal_assistant_dotnet_mvc.Models.Entities.ComponentTags", b =>
                {
                    b.HasOne("meal_assistant_dotnet_mvc.Models.Entities.Components", "Component")
                        .WithMany("ComponentTags")
                        .HasForeignKey("ComponentId")
                        .HasConstraintName("fk_rails_89f23cfd96");

                    b.HasOne("meal_assistant_dotnet_mvc.Models.Entities.Tags", "Tag")
                        .WithMany("ComponentTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("fk_rails_e168d83886");
                });

            modelBuilder.Entity("meal_assistant_dotnet_mvc.Models.Entities.Components", b =>
                {
                    b.HasOne("meal_assistant_dotnet_mvc.Models.Entities.Users", "User")
                        .WithMany("Components")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_rails_624f40a895");
                });

            modelBuilder.Entity("meal_assistant_dotnet_mvc.Models.Entities.Feedbacks", b =>
                {
                    b.HasOne("meal_assistant_dotnet_mvc.Models.Entities.Users", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_rails_c57bb6cf28");
                });

            modelBuilder.Entity("meal_assistant_dotnet_mvc.Models.Entities.MainDishes", b =>
                {
                    b.HasOne("meal_assistant_dotnet_mvc.Models.Entities.Meals", "Meal")
                        .WithMany("MainDishes")
                        .HasForeignKey("MealId")
                        .HasConstraintName("fk_rails_dd5aa3f07c");
                });

            modelBuilder.Entity("meal_assistant_dotnet_mvc.Models.Entities.Meals", b =>
                {
                    b.HasOne("meal_assistant_dotnet_mvc.Models.Entities.MealTimes", "MealTime")
                        .WithMany("Meals")
                        .HasForeignKey("MealTimeId")
                        .HasConstraintName("fk_rails_f94c6134ac");
                });
#pragma warning restore 612, 618
        }
    }
}
